"""
Django settings for Backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

# from pathlib import Path

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-eyi%%1_r0qk_g5qx9ca+g=!h$4=@)ps78o3cwfo22-_ilm2rlj"

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []

import os
from pathlib import Path
from dotenv import load_dotenv

# Read API Base URL from environment variable
# API_BASE_URL = os.getenv('REACT_APP_API_URL', 'http://localhost:8000')  # default to local in development
API_BASE_URL = 'http://localhost:8000'

# Load environment variables
ENV_MODE = os.getenv('ENV_MODE', 'dev')  # Default to 'dev' if ENV_MODE is not set
ENV_FILE = f"/app/.env.{ENV_MODE}"  # Docker mounts .env file here

if os.path.exists(ENV_FILE):
    load_dotenv(dotenv_path=ENV_FILE)

# Base Directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Secret Key
SECRET_KEY = os.getenv("SECRET_KEY", "fallback-secret-key")

# Debug Mode
# DEBUG = os.getenv("DEBUG", "False").lower() == "true"
DEBUG = True

# Allowed Hosts
# ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")
ALLOWED_HOSTS = ["*", 'localhost',
    '127.0.0.1',
    'backend_centralized',  # Add the service name
    '[::1]']

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "Authentication",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Enables JWT authentication for DRF
    ),
}

from datetime import timedelta  # Import timedelta for setting token expiration times

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),  # Access token is valid for 1 day
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Refresh token is valid for 7 days
    'AUTH_HEADER_TYPES': ('Bearer',),  # Tokens must be sent as 'Bearer <token>' in Authorization header
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = "Backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": BASE_DIR / "db.sqlite3",
    # }
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': os.getenv("POSTGRES_DB"),
    #     'USER': os.getenv("POSTGRES_USER"),
    #     'PASSWORD': os.getenv("POSTGRES_PASSWORD"),
    #     'HOST': os.getenv("DB_HOST"),
    #     'PORT': os.getenv("DB_PORT", 5432),
    # },

    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'centralized',
        'USER': 'aryan',
        'PASSWORD': 'centralized',
        'HOST': 'localhost',
        'PORT': '5432',
    },

    # 'ilp': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': 'ilp',
    #     'USER': 'aryan',
    #     'PASSWORD': 'centralized',
    #     'HOST': 'localhost',
    #     'PORT': '5432',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = 'Authentication.User'

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "aryan223653badkul@gmail.com"  # Replace with your email
EMAIL_HOST_PASSWORD = "cbgn zldz jdxs cqed"  # Use an App Password if 2FA is enabled
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

DATABASE_ROUTERS = ['Backend.database_router.ProfileRouter']

# Static and Media File Settings
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # collectstatic will move here

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')


